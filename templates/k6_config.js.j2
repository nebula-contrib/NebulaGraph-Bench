import nebulaPool from 'k6/x/nebulagraph';
import { check } from 'k6';
import { Trend } from 'k6/metrics';
import { sleep } from 'k6';

var latencyTrend = new Trend('latency', true);
var responseTrend = new Trend('responseTime', true);
var rowSizeTrend = new Trend('rowSize');

var graph_option = {
  address: "{{ address }}",
  space: "{{ space }}",
  csv_path: "{{ csv_path }}",
  pool_policy: "connection",
  csv_delimiter: "|",
  csv_with_header: true,
  output: "{{ output_path }}",
  username: "{{ user }}",
  password: "{{ password }}",
  max_size: 2000,
};

nebulaPool.setOption(graph_option);
var pool = nebulaPool.init();
// initial session for every vu
var session = pool.getSession()

String.prototype.format = function () {
  var formatted = this;
  var data = arguments[0];

  formatted = formatted.replace(/\{(\d+)\}/g, function(match, key){
    return data[key]
  });
  return formatted;
};


export default function (data) {
  // get csv data from csv file
  let d = session.getData();
  // {0} means the first column data in the csv file
  let ngql = "{{ nGQL }}".format(d);
  let response = session.execute(ngql);
  check(response, {
    "IsSucceed": (r) => r !== null && r.isSucceed() === true
  });
  // add trend
  if (response !== null) {
    latencyTrend.add(response.getLatency());
    responseTrend.add(response.getResponseTime());
    rowSizeTrend.add(response.getRowSize());
  }
};

export function teardown() {
  pool.close();
}
